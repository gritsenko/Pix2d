# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Desktop windows innosetup release

on:
  workflow_dispatch:
  push:
    # Pattern matched against refs/tags
    tags:        
      - 'v*'           # Push events to every tag not containing /

env:
    Project_Path: Sources\PlatformHeads\Desktop\Pix2d.Desktop.Windows\Pix2d.Desktop.Windows.csproj                        # Replace with your solution name, i.e. MyWpfApp.sln.
    Output_Path: C:\tmp\pix2dAv
    InnoSetupPath: C:\Projects\pix2d\IntegrationScripts\build-setup.cmd

jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: 7.0.x

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id:   gitversion # id to later be referenced
      uses: gittools/actions/gitversion/execute@v0

    - name: Display GitVersion outputs (step output)
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

    # - name: Restore dependencies
    #   run: dotnet restore $env:Project_Path
    # - name: Build
    #   run: dotnet build --no-restore $env:Project_Path
    # - name: Test
    #   run: dotnet test --no-build --verbosity normal $env:Project_Path
    
    # - name: clean output directory
    #   run: Remove-Item -Recurse -Force $env:Output_Path
      
    # - name: publish x64
    #   run: dotnet publish -c Release -r win-x64 -o $env:Output_Path $env:Project_Path
    
    # - name: Building the installer
    #   run: C:\Projects\pix2d\IntegrationScripts\build-setup.cmd
    #   shell: cmd

    # - name: Create Release
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.RELEASE_REPO_SECRET }} # This token is provided by Actions, you do not need to create your own token
    #   run: |
    #     gh release create v3.1.4 "C:\tmp\pix2d_setup\pix2d_setup.exe" -R https://github.com/gritsenko/pix2d.com