name: Multi-Platform Release

on:
  workflow_dispatch:
    inputs:
      include_android:
        description: 'Include Android build'
        type: boolean
        required: false
        default: false
      include_windows:
        description: 'Include Windows build'
        type: boolean
        required: false
        default: false
      include_linux:
        description: 'Include Linux build'
        type: boolean
        required: false
        default: false
      include_wasm_deploy:
        description: 'Include WASM deployment to app.pix2d.com'
        type: boolean
        required: false
        default: false
      version:
        description: 'Version (e.g. 3.3.3) for manual run'
        type: string
        required: false
        default: ''
  push:
    tags:
      - 'v*'

env:
  ANDROID_PROJECT_PATH: Sources/Heads/Pix2d.Droid/Pix2d.Droid.csproj
  DESKTOP_PROJECT_PATH: Sources/Heads/Pix2d.Desktop/Pix2d.Desktop.csproj
  BROWSER_PROJECT_PATH: Sources/Heads/Pix2d.Browser/Pix2d.Browser.csproj
  OUTPUT_PATH: ./build-output
  WASM_OUTPUT_DIR_NAME: wasm # Directory name for WASM build within OUTPUT_PATH

jobs:
  # This job calculates whether any specific build platform has been explicitly selected
  # in a manual workflow dispatch. If none are selected, it implies building all.
  determine_build_scope:
    runs-on: ubuntu-latest
    outputs:
      any_platform_included: ${{ steps.set_output.outputs.any_platform_included }}
    steps:
      - name: Log input values and determine output
        id: set_output # Add an ID to reference outputs from this step
        run: |
          echo "Input include_android: ${{ github.event.inputs.include_android }}"
          echo "Input include_windows: ${{ github.event.inputs.include_windows }}"
          echo "Input include_linux: ${{ github.event.inputs.include_linux }}"
          echo "Input include_wasm_deploy: ${{ github.event.inputs.include_wasm_deploy }}"

          # Calculate the boolean value for any_platform_included
          # Using bash logic for robustness in evaluating boolean inputs
          ANY_INCLUDED=false
          if [[ "${{ github.event.inputs.include_android }}" == "true" || \
                "${{ github.event.inputs.include_windows }}" == "true" || \
                "${{ github.event.inputs.include_linux }}" == "true" || \
                "${{ github.event.inputs.include_wasm_deploy }}" == "true" ]]; then
            ANY_INCLUDED=true
          fi

          echo "Calculated any_platform_included: $ANY_INCLUDED"
          echo "any_platform_included=$ANY_INCLUDED" >> $GITHUB_OUTPUT

  build_android:
    needs: determine_build_scope
    # Condition to run the job:
    # 1. If it's a push event (e.g., tag push), or
    # 2. If 'include_android' input is true, or
    # 3. If no specific platform was selected for manual dispatch (meaning all should be built).
    if: ${{ github.event_name == 'push' || github.event.inputs.include_android == 'true' || !needs.determine_build_scope.outputs.any_platform_included }}
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Get Version
      id: version
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq 'push') {
            $version = $env:GITHUB_REF -replace 'refs/tags/v',''
            Write-Host "Using version from git tag: $version"
        } elseif ("${{ github.event.inputs.version }}") {
            $version = "${{ github.event.inputs.version }}"
            Write-Host "Using version from manual input: $version"
        } else {
            $version = '0.0.0'
            Write-Host "Using default version for manual run: $version"
        }

        $cleanVersion = $version -replace '[^\d.]', ''
        if (-not ($cleanVersion -match '^\d+\.\d+\.\d+$')) {
            Write-Error "Invalid version format: $cleanVersion"
            exit 1
        }

        Write-Output "VERSION=$cleanVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "Using version: $cleanVersion"

    - name: Restore dependencies
      run: dotnet restore ${{ env.ANDROID_PROJECT_PATH }} --property WarningLevel=0

    - name: Build
      run: dotnet build --no-restore ${{ env.ANDROID_PROJECT_PATH }} --property WarningLevel=0 -p:Version=${{ env.VERSION }}

    - name: Test
      run: dotnet test --no-build --verbosity normal ${{ env.ANDROID_PROJECT_PATH }}

    - name: Clean output directory
      run: |
        if (Test-Path ${{ env.OUTPUT_PATH }}) {
          Remove-Item -Recurse -Force ${{ env.OUTPUT_PATH }}
        }

    - name: Publish for Android
      env:
        ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        New-Item -ItemType Directory -Path "$env:RUNNER_TEMP/keystore" -Force
        $keyStorePath = "$env:RUNNER_TEMP/keystore/Pix2d.keystore"
        [System.Convert]::FromBase64String($env:ANDROID_KEYSTORE) | Set-Content -Path $keyStorePath -AsByteStream
        dotnet publish -f net9.0-android -c Release `
          -p:AndroidKeyStore=true `
          -p:AndroidSigningKeyStore=$keyStorePath `
          -p:AndroidSigningStorePass=$env:ANDROID_KEYSTORE_PASSWORD `
          -p:AndroidSigningKeyAlias=$env:ANDROID_KEY_ALIAS `
          -p:AndroidSigningKeyPass=$env:ANDROID_KEY_PASSWORD `
          -o ${{ env.OUTPUT_PATH }} ${{ env.ANDROID_PROJECT_PATH }} `
          --property WarningLevel=0

    - name: Rename Artifacts
      shell: pwsh
      run: |
        $version = $env:VERSION
        cd ${{ env.OUTPUT_PATH }}
        Get-ChildItem -Filter *-Signed.* | Where-Object {
            $_.Extension -in '.apk', '.aab'
        } | Rename-Item -NewName {
            "pix2d_v$version$($_.Extension)"
        }

    - name: Upload Android Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android
        path: ${{ env.OUTPUT_PATH }}/pix2d_v${{ env.VERSION }}.*

  build_windows:
    needs: determine_build_scope
    # Condition to run the job:
    # 1. If it's a push event (e.g., tag push), or
    # 2. If 'include_windows' input is true, or
    # 3. If no specific platform was selected for manual dispatch (meaning all should be built).
    if: ${{ github.event_name == 'push' || github.event.inputs.include_windows == 'true' || !needs.determine_build_scope.outputs.any_platform_included }}
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Get Version
      id: version
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq 'push') {
            $version = $env:GITHUB_REF -replace 'refs/tags/v',''
            Write-Host "Using version from git tag: $version"
        } elseif ("${{ github.event.inputs.version }}") {
            $version = "${{ github.event.inputs.version }}"
            Write-Host "Using version from manual input: $version"
        } else {
            $version = '0.0.0'
            Write-Host "Using default version for manual run: $version"
        }

        $cleanVersion = $version -replace '[^\d.]', ''
        if (-not ($cleanVersion -match '^\d+\.\d+\.\d+$')) {
            Write-Error "Invalid version format: $cleanVersion"
            exit 1
        }

        Write-Output "VERSION=$cleanVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "Using version: $cleanVersion"

    - name: Restore dependencies
      run: dotnet restore ${{ env.DESKTOP_PROJECT_PATH }} --property WarningLevel=0

    - name: Build
      run: dotnet build --no-restore ${{ env.DESKTOP_PROJECT_PATH }} --property WarningLevel=0 -p:Version=${{ env.VERSION }}

    - name: Publish for Windows
      shell: pwsh
      run: |
        $OutputDir = "./publish-windows"
        dotnet publish -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o $OutputDir ${{ env.DESKTOP_PROJECT_PATH }}
        Compress-Archive -Path "$OutputDir/*" -DestinationPath "Pix2d_win-x64-$env:VERSION-portable.zip"

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-desktop
        path: Pix2d_win-x64-${{ env.VERSION }}-portable.zip

  build_linux:
    needs: determine_build_scope
    # Condition to run the job:
    # 1. If it's a push event (e.g., tag push), or
    # 2. If 'include_linux' input is true, or
    # 3. If no specific platform was selected for manual dispatch (meaning all should be built).
    if: ${{ github.event_name == 'push' || github.event.inputs.include_linux == 'true' || !needs.determine_build_scope.outputs.any_platform_included }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Get Version
      id: version
      shell: bash
      run: |
        if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            version=$(echo "$GITHUB_REF" | sed 's/refs\/tags\/v//')
            echo "Using version from git tag: $version"
        elif [ -n "${{ github.event.inputs.version }}" ]; then
            version="${{ github.event.inputs.version }}"
            echo "Using version from manual input: $version"
        else
            version="0.0.0"
            echo "Using default version for manual run: $version"
        fi

        clean_version=$(echo "$version" | tr -cd '0-9.')
        if [[ ! "$clean_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $clean_version"
            exit 1
        fi

        echo "VERSION=$clean_version" >> $GITHUB_ENV
        echo "Using version: $clean_version"

    - name: Restore dependencies
      run: dotnet restore ${{ env.DESKTOP_PROJECT_PATH }} --property WarningLevel=0

    - name: Build
      run: dotnet build --no-restore ${{ env.DESKTOP_PROJECT_PATH }} --property WarningLevel=0 -p:Version=${{ env.VERSION }}

    - name: Publish for Linux
      shell: bash
      run: |
        OutputDir="./publish-linux"
        dotnet publish -c Release -r linux-x64 --self-contained true \
          -p:PublishSingleFile=true -o "$OutputDir" "$DESKTOP_PROJECT_PATH"
        mkdir -p artifacts/linux-desktop
        tar -czvf "artifacts/linux-desktop/Pix2d_linux-x64.$VERSION.tar.gz" -C "$OutputDir" .

    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-desktop
        path: artifacts/linux-desktop/Pix2d_linux-x64-${{ env.VERSION }}.tar.gz

  # Dedicated job for building the WASM artifacts so they can be uploaded
  build_wasm:
    needs: determine_build_scope
    # Condition to run the job:
    # 1. If it's a push event (e.g., tag push), or
    # 2. If 'include_wasm_deploy' input is true, or
    # 3. If no specific platform was selected for manual dispatch (meaning all should be built).
    if: ${{ github.event_name == 'push' || github.event.inputs.include_wasm_deploy  == 'true' || !needs.determine_build_scope.outputs.any_platform_included }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Install WASM workload
      run: dotnet workload install wasm-tools # Add this step to ensure wasm-tools are updated

    - name: Get Version
      id: version
      shell: bash
      run: |
        if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            version=$(echo "$GITHUB_REF" | sed 's/refs\/tags\/v//')
            echo "Using version from git tag: $version"
        elif [ -n "${{ github.event.inputs.version }}" ]; then
            version="${{ github.event.inputs.version }}"
            echo "Using version from manual input: $version"
        else
            version="0.0.0"
            echo "Using default version for manual run: $version"
        fi

        clean_version=$(echo "$version" | tr -cd '0-9.')
        if [[ ! "$clean_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $clean_version"
            exit 1
        fi

        echo "VERSION=$clean_version" >> $GITHUB_ENV
        echo "Using version: $clean_version"

    - name: Restore dependencies
      run: dotnet restore ${{ env.BROWSER_PROJECT_PATH }} --property WarningLevel=0

    - name: Build
      run: dotnet build --no-restore ${{ env.BROWSER_PROJECT_PATH }} --property WarningLevel=0 -p:Version=${{ env.VERSION }}

    - name: Publish for WASM
      shell: bash
      run: |
        # Define the output directory for the WASM build
        # This will create a 'wasm' subdirectory within the general OUTPUT_PATH
        OutputDir="${{ env.OUTPUT_PATH }}/${{ env.WASM_OUTPUT_DIR_NAME }}"
        mkdir -p "$OutputDir" # Ensure the directory exists
        dotnet publish -c Release -f net9.0-browser -o "$OutputDir" "$BROWSER_PROJECT_PATH" \
          --property WarningLevel=0

    - name: Upload WASM Artifact
      uses: actions/upload-artifact@v4
      with:
        name: browser-wasm # Name for the WASM artifact
        path: ${{ env.OUTPUT_PATH }}/${{ env.WASM_OUTPUT_DIR_NAME }} # Path to the published WASM directory

  # New job for deploying WASM artifacts to app.pix2d.com
  deploy_wasm_to_gh_pages:
    runs-on: ubuntu-latest
    needs: [build_wasm, determine_build_scope] # Depends on successful WASM build and the flag for 'build_all'
    # Condition to run the job:
    # 1. If it's a push event (e.g., tag push), or
    # 2. If 'include_wasm_deploy' input is true, or
    # 3. If no specific platform was selected for manual dispatch (meaning all should be built).
    if: ${{ github.event_name == 'push' || github.event.inputs.include_wasm_deploy || !needs.determine_build_scope.outputs.any_platform_included }}
    permissions:
      contents: write # Required for pushing to another repository

    steps:
    - name: Download WASM Artifact
      uses: actions/download-artifact@v4
      with:
        name: browser-wasm # Download the artifact that was uploaded in build_wasm
        path: wasm_build # Path where WASM files will be downloaded

    - name: Get Version
      id: version
      shell: bash
      run: |
        if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            version=$(echo "$GITHUB_REF" | sed 's/refs\/tags\/v//')
            echo "Using version from git tag: $version"
        elif [ -n "${{ github.event.inputs.version }}" ]; then
            version="${{ github.event.inputs.version }}"
            echo "Using version from manual input: $version"
        else
            version="0.0.0"
            echo "Using default version for manual run: $version"
        fi

        clean_version=$(echo "$version" | tr -cd '0-9.')
        if [[ ! "$clean_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $clean_version"
            exit 1
        fi

        echo "VERSION=$clean_version" >> $GITHUB_ENV
        echo "Using version: $clean_version"

    - name: Checkout app.pix2d.com repository
      uses: actions/checkout@v4
      with:
        repository: gritsenko/app.pix2d.com # Target repository
        token: ${{ secrets.APP_PIX2D_COM_REPO_TOKEN }} # Token for writing
        path: app.pix2d.com_repo # Path where the repository will be cloned

    - name: Clean existing files in target repo
      run: |
        # Remove all content from the target repository, except for the .git folder
        # This is important so old files do not remain and GitHub Pages do not cache them
        cd app.pix2d.com_repo
        shopt -s extglob
        rm -rf !(.git)
        shopt -u extglob
      shell: bash

    - name: Copy WASM build contents to target repository root
      # The WASM build outputs files into a 'wwwroot' subdirectory.
      # This step copies the *contents* of 'wwwroot' directly into the root of the target repository.
      run: |
        cp -r wasm_build/wwwroot/* app.pix2d.com_repo/
      shell: bash

    - name: Commit and Push to app.pix2d.com
      run: |
        cd app.pix2d.com_repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "Deploy Pix2D WASM build v${{ env.VERSION }}" || echo "No changes to commit"
        git push
      shell: bash

  create_release:
    runs-on: ubuntu-latest
    # Depends on all build and deploy jobs
    needs: [build_android, build_windows, build_linux, deploy_wasm_to_gh_pages]
    # Only run if a tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Extract Version
      id: extract_version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "Error: Release can only be created from a version tag"
          exit 1
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        name: Pix2D v${{ steps.extract_version.outputs.version }}
        generate_release_notes: true
        draft: false
        prerelease: false
        # Add link to the online version in the release body
        body: |
          🎉 Pix2D v${{ steps.extract_version.outputs.version }} released!

          You can try the online version of Pix2D here: [https://app.pix2d.com](https://app.pix2d.com)

          This release includes:
          (Generated release notes will go here automatically)

        files: |
          artifacts/android/pix2d_v${{ steps.extract_version.outputs.version }}.apk
          artifacts/android/pix2d_v${{ steps.extract_version.outputs.version }}.aab
          artifacts/windows-desktop/Pix2d_win-x64-${{ steps.extract_version.outputs.version }}-portable.zip
          artifacts/linux-desktop/Pix2d_linux-x64-${{ steps.extract_version.outputs.version }}.tar.gz
          # The WASM artifact is deployed directly to app.pix2d.com, so it's usually not attached as a separate file to the release.
          # If you also need it attached to the release, uncomment the line below:
          # artifacts/browser-wasm
